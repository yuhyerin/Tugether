package com.web.curation.controller;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.web.curation.dto.BasicResponse;
import com.web.curation.dto.article.Article;
import com.web.curation.jwt.service.JwtService;
import com.web.curation.service.articlewrite.ArticleWriteService;
import com.web.curation.service.fileupload.FileUploadService;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jws;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;

@ApiResponses(value = { @ApiResponse(code = 401, message = "Unauthorized", response = BasicResponse.class),
        @ApiResponse(code = 403, message = "Forbidden", response = BasicResponse.class),
        @ApiResponse(code = 404, message = "Not Found", response = BasicResponse.class),
        @ApiResponse(code = 500, message = "Failure", response = BasicResponse.class) })

@CrossOrigin(origins = { "*" })
@RestController
@RequestMapping("/tugether")
public class ArticleWriteController {
	
	@Value("${window.article.upload.directory}")
	String upload_FILE_PATH;
	
	@Autowired
	private JwtService jwtService;
	
	@Autowired
	private ArticleWriteService articleWriteService;
	
	@Autowired
	private FileUploadService fileUploadService;
	
	@PostMapping("/articlewrite")
    public ResponseEntity<Map<String,Object>> addArticle( @RequestParam("articleimg") MultipartFile mFile, 
    		@RequestParam("contents") String contents,
    		@RequestParam("link") String link,
    		HttpServletRequest request) {
//		@RequestParam MultipartFile mFile
		Map<String, Object> resultMap = new HashMap<String, Object>();
		HttpStatus status = null;
		String token = request.getHeader("jwt-auth-token");
		Jws<Claims> claims = jwtService.getDecodeToken(token);
		Map<String, Object> Userinfo = new HashMap<String, Object>();
		Userinfo = (Map<String, Object>) claims.getBody().get("AuthenticationResponse");
		String email = Userinfo.get("email").toString(); //이메일 
		String writer = Userinfo.get("nickname").toString(); //닉네임 
		// 등록한 태그 리스트를 넘겨주면 받아서 => ArticleTag에 추가 하기 !!! 
		String articleimg = mFile.getOriginalFilename();
		System.out.println("파일명: "+articleimg);
		System.out.println("글내용: "+contents);
		System.out.println("링크: "+link);
		
		Article article = new Article();
		article.setEmail(email);
		article.setWriter(writer);
		article.setContent(contents);
		article.setImage(articleimg);
		article.setLink(link);
		article.setLike_cnt(0);
		article.setScrap_cnt(0);
		articleWriteService.addArticle(article);
		System.out.println("DB에 글을 insert 했습니다.");
		
		try {
			mFile.transferTo(new File("/var/www/img/"+mFile.getOriginalFilename()));
			status = HttpStatus.OK;
			
		}catch(IllegalStateException | IOException e) {
			status = HttpStatus.INTERNAL_SERVER_ERROR;
			e.printStackTrace();
		}
		
		return new ResponseEntity<Map<String,Object>>(resultMap, status);
		
    }

}
